// ② functions.js
// 👉 関数まわりを集中管理

// 含める機能：

// 関数

// 引数

// 戻り値

// アロー関数

// コールバック関数


//qittaより
//functionで関数を定義し、（）で引数を設定する。
function introduce(name, job) {
  //functionで関数introduceを定義し、 引数(関数に与える情報)name、job
    console.log(`ここが呼び出し元。
        上記の関数functon introduceに、
        ここと下記の引数の値が入り、
        ここで呼び出される。→ 私は${name}です。`); //コンソール出力。関数introduceの実行内容。
  console.log(`${job}です。`); //同上
}

introduce("哲也。※引数1で上記のnameにわたる", "プログラマー。※ここは引数2で上記のjobに渡る"); //上記で設定した関数introduceを実行、今回はコンソール出力する。あらかじめ引数の値も設定しておく。
//関数introduceを実行すると設定した引数の値('ta1fukumoto', 'エンジニア')が関数introduceのname、jobに値が渡される。
//下記が表示される。
//私はta1fukumotoです。
//エンジニアです。




// ==========================
// ▼ 関数式（無名関数）の例
// ==========================

// 🔸「関数式（かんすうしき）」とは：
//   → 関数（＝ある処理をまとめたもの）を、定数に代入する書き方です。
//   → 「無名関数（むめいかんすう）」とは、名前のない関数という意味です。

// introduce2 という定数に、関数を代入しています。
// ここでの function(name, job) が「無名関数」です。
const introduce2 = function (name, job) {
  // 🔹この関数の中では、「name」と「job」が受け取った値（引数）を使って処理します。

  // 下のように書くことで、文字の中に変数（${name}や${job}）を入れることができます。
  // 「`（バッククォート）」を使うと、変数を埋め込んだ文字列が作れます（これをテンプレート文字列といいます）。

  // 関数が呼び出されると、下の2行が実行されます。
  console.log(`ここが呼び出し元。下記のintroduce2("tetsuya", "コーダー")で関数式を呼び出し、()内の引数の値が上記のfunction(name,job)に入る。 → 私は${name}です。`);
  console.log(`${job}です。`);
};

// ==========================
// ▼ 関数式の呼び出し方
// ==========================

// 🔸introduce2("tetsuya", "コーダー") のように、定数名introduce2に対して()をつけて実行します。
// 🔸()の中に値を入れることで、「引数（ひきすう）」として関数にデータを渡します。
//    → この例では name = "tetsuya", job = "コーダー" が渡されます。

introduce2("tetsuya", "コーダー");

// 出力結果：
// 私はtetsuyaです。
// コーダーです。






//アロー関数※戻り値はなし
//右辺の関数を"function()"から"()=>"に置き換えてコードをシンプルにする。
const introduce3 = (name, job) => {
  //(2)関数式introduce3(引数)。呼び出し元の引数の値が入る。
  console.log(`私は${name}です。`); //(3)コンソール出力。関数の実行内容。引数の値を入れて出力される。
  console.log(`${job}です。`); //同上
};

//(1)呼び出し元。(4)関数式introduce3を呼び出す。
introduce3("aya", "アドバイザー");
//私はayaです。
//アドバイザーです。

//qittaより
//戻り値その１（呼び出し元で受け取る処理結果）
//関数(アロー関数と関数式)
const area = (height, width) => {
  //(2)アロー関数式area（引数）。呼び出し元の引数の値が代入される。
  return height * width; //(3)関数areaの実行内容=戻り値return。値は60。（12×5の計算結果）
};

console.log("ここのconsoleが呼び出し元。右の関数area(12,5)を上記の関数area(height, width)とreturn height * widthで計算させてreturnでここに戻す" + area(12, 5)); //(1)呼び出し元。引数12,5を設定しておく。
//(4)呼び出し元で関数areaをコンソール出力する際に戻り値returnの値60が代入される。
//60

//関数を別の定数に代入して出力
const result2 = area(120,50); //上記の関数areaの(height, width)で計算させて、定数result2に代入される。
console.log("ここのconsoleがresult2の呼び出し元。関数area(120,50)の値を上記の関数area(height, width)とreturn height * widthで計算させてreturnでresult2がここに戻る" + result2); //定数result２を出力する。関数areaの引数、戻り値
//6000

    //戻り値その２（サムライエンジニアより）

    function hello(name) {
    //(2)関数hello。引数(name)に呼び出し元の値'サムライエンジニア太郎'が代入される。

    return "こんにちは、" + name + "さん"; //(3)関数の実行内容=戻り値。引数の値を代入して計算する。
    }

    console.log("ここのconsoleがhelloの呼び出し元。上記helloののnameに値が渡ってreturnでhelloがここに戻ってくる" + hello("サムライエンジニア太郎")); //(1)呼び出し元。引数の値に'サムライエンジニア太郎'を設定しておく。
    //④呼び出す際に、戻り値が代入され出力される。
    // 'こんにちは、' + 'サムライエンジニア太郎' + 'さん'
    //がコンソール出力される。





// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// 1:19:00〜
//関数function<!--1:19:00～-->

// 現在の時刻が20時より大きい（21時〜23時）なら背景を黒にする
if (new Date().getHours() > 20) {
    document.body.style.backgroundColor = "#000";
}

// ↓上記のif文を関数化する
function changeDarkMode() {
    // 上記のif文と同じ内容
    if (new Date().getHours() > 20) {
        document.body.style.backgroundColor = "#000";
    }
}

// 関数を呼び出す
changeDarkMode();






// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq

//コールバック関数<!--1:26:20～-->
console.log(" ↓↓↓ コールバック関数 a=メイン関数、b=コールバック引数、c=コールバック関数");

// a = メイン関数
// b = コールバック引数（関数を受け取る）
function a(b) {
  console.log("Hi,Cat!"); // メインの処理
  b(); // b() = c() を実行（コールバック関数の呼び出し）
}

// c = コールバック関数（あとから実行される関数）
function c() {
  console.log("Hi,Bat!"); // 追加の処理
}

// 呼び出し：メイン関数 a に コールバック関数 c を渡す
a(c);





// ▼ 実行の流れまとめ図（c の例）▼
// (1) ユーザーが a(c) を実行（c は追加関数）
//           ↓
// (2) 関数 a がスタート（b = c）← a はメイン関数、b は引数名
//           ↓
// (3) "Hi,Cat!" を表示（メイン処理）
//           ↓
// (4) b() を実行（＝ c() を実行）→ コールバック処理
//           ↓
// (5) 関数 c がスタート（追加処理）
//           ↓
// (6) "Hi,Bat!" を表示（追加あいさつ）
//           ↓
//       完了！








// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// 戻り値<!--1:27:00～-->



// ===================================
// 🌸 季節チェックプログラム（if / else if / else の動きがわかる版）
// ===================================

// 現在の月（1〜12）を取得
const month = new Date().getMonth() + 1; 

// -----------------------------------------------------------------------------
// 【 new Date() の説明 】
// ※※※ オブジェクト → コンピュータのメモリ（RAM）上に保存される。
//   - JavaScript に組み込まれている「Dateオブジェクト」を新しく作るための構文。
//   - 「new」はオブジェクトを新しく作るキーワードで、Date() は「日時・日付」の情報を持つ特別な型。
//   - new Date() とすると「現在の日時（PCやスマホの設定時間）」が入った Date オブジェクトが生成される。
//   - 例: 今が 2025年8月12日 07:15:30 なら、
//         new Date() → Tue Aug 12 2025 07:15:30 GMT+0900 (日本標準時)
//   - Date() にはオプションで特定の日付や時刻を入れることも可能（例: new Date("2025-12-25")）。

// -----------------------------------------------------------------------------
// 【 .getMonth() の説明 】
//   - Dateオブジェクトから「月」を取り出すメソッド（関数のように使う機能）。
//   - 注意: JavaScript の月は 0 から始まる仕様（1月 → 0、2月 → 1、… 12月 → 11）。
//   - 例: new Date("2025-01-15").getMonth() → 0
//         new Date("2025-08-12").getMonth() → 7
//   - そのため「人間が使う1〜12の月」に合わせるために +1 をする必要がある。

// -----------------------------------------------------------------------------
// 【オブジェクトとは何か？】
//   - JavaScriptにおける「データのかたまり」。
//   - 1つの変数の中に、複数のデータ（プロパティ）や機能（メソッド）をセットで持てる。
//   - 例: 引き出しの中に「名前」や「年齢」などの情報と、それを使う道具を一緒に入れておくイメージ。
//     const person = {
//       name: "Tetsuya", // プロパティ（データ）
//       age: 41,          // プロパティ（データ）
//       greet: function() { console.log(`こんにちは、${this.name}です！`); } // メソッド（機能）
//     };

// -----------------------------------------------------------------------------
// 【Dateオブジェクトの保存場所】
//   - new Date() を実行すると、コンピュータのメモリ（RAM）上に日付・時刻情報をまとめたデータのかたまりが作られる。
//   - 変数（例: const month）には、そのデータの場所（住所）への参照が保存される。
//   - 実際の日時はPCやスマホのシステム時間を元にして作られる。
// -----------------------------------------------------------------------------

// getMonth() は 0〜11 を返すので +1 して 1〜12 に変換
// 今回は例として現在の月を自動取得（テスト時は数値を直接入れてもOK）

console.log("↓↓↓ === 季節判定スタート ===");
console.log(`現在の月: ${month}月`);

// --------------------------------------------------
// if, else if, else の流れ
// --------------------------------------------------
// 1. if(条件) → 最初にチェックする条件（ここでは「3〜5月」）
// 2. else if(条件) → 上が false の場合に次の条件を試す
// 3. else if(条件) → さらに次の条件
// 4. else → どれにも当てはまらなければここ
// --------------------------------------------------

if (month >= 3 && month <= 5) { 
  console.log("🌸 春です！花が咲き始めます。");
  console.log(` ← month が 3〜5 の場合に実行（今回は ${month}）`);

} else if (month >= 6 && month <= 8) { 
  console.log("☀️ 夏です！海や山で遊びましょう。");
  console.log(` ← month が 6〜8 の場合に実行（今回は ${month}）`);

} else if (month >= 9 && month <= 11) { 
  console.log("🍁 秋です！紅葉がきれいです。");
  console.log(` ← month が 9〜11 の場合に実行（今回は ${month}）`);

} else { 
  console.log("⛄ 冬です！雪が降るかもしれません。");
  console.log(` ← 上のどれにも当てはまらない場合に実行（今回は ${month}）`);
}

console.log("=== 季節判定おわり ===");

/*
【動作シミュレーション表】

| month の値  | 流れ                                               | 実行されるブロック | 出力例                              |
|-------------|---------------------------------------------------|--------------------|---------------------------------------|
| 3〜5        | if が true → そこで終了                           | if                 | 🌸 春です！花が咲き始めます。         |
| 6〜8        | if false → else if(夏) true → そこで終了          | else if(夏)        | ☀️ 夏です！海や山で遊びましょう。     |
| 9〜11       | if false → else if(夏) false → else if(秋) true   | else if(秋)        | 🍁 秋です！紅葉がきれいです。         |
| 12, 1, 2    | if false → else if(夏) false → else if(秋) false  | else               | ⛄ 冬です！雪が降るかもしれません。    |

【ポイント】
- if は最初にチェックする条件
- else if は前の条件が false の場合に次を試す
- else はどれも当てはまらなかった時の最後の処理
- 条件が true になったら下はもう見ない
*/







// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
//戻り値その１<!--1:31:00～-->


// ===================================
// 🚀 戻り値チェックプログラム（アロー関数の動きがわかる版）
// ===================================

//Q.実行したら戻り値7777を返す関数"hyperDrive"を作成しなさい。

// --------------------------------------------------
// アロー関数 hyperDrive を定義
// --------------------------------------------------
// アロー関数とは、function を使わずに短く書ける関数の形
// () の中に引数、{} の中に実行する処理を書く
// 今回は、数値 7777 を返すだけのシンプルな関数
const hyperDrive = () => {
  return 7777; 
  // return は「この値を関数の外に渡す」命令
  // この場合、関数を呼び出すと必ず 7777 が戻る
};

console.log("↓↓↓ === 関数実行スタート ===");

// --------------------------------------------------
// ↓↓↓ アロー関数 hyperDrive を呼び出し、その戻り値を定数 resultValue に代入する
// --------------------------------------------------
console.log("↓↓↓ const resultValue = hyperDrive(); "
    + "下記のconst resultValueでは 関数名 hyperDrive の後ろに () をつけると関数hyperDrive実行され、戻り値が resultValue に入る。");
const resultValue = hyperDrive(); 
// 上記のconst resultValueでは 関数名 hyperDrive の後ろに () をつけると関数hyperDrive実行され、戻り値が resultValue に入る
// ここで resultValue に入っているのは関数でなく「数値 7777」であり
// resultValue は「参照」しかできず、関数のように呼び出すことはできない
// もし resultValue(); とすると「数値を関数として呼び出そうとした」ことになりエラーになる
// 関数として呼び出せるのは hyperDrive() のように、関数そのものに () をつけた場合だけ
// 定数 resultValue の中に格納された アロー関数 hyperDrive の戻り値 7777 を表示する

console.log(`${resultValue} ← 左記の波括弧resultValue で 定数 resultValue を参照する。
    定数 resultValue の中に格納された アロー関数 hyperDrive
    の戻り値 7777 を表示する。`);

// --------------------------------------------------
// 関数名そのものを直接呼び出す例
// --------------------------------------------------
console.log(`${hyperDrive()} ← $波括弧hyperDriveカッコ で 関数 hyperDrive() を直接呼び出した。`);

// ここでは hyperDrive() を直接実行しているため、処理が走り、7777 が返る
// この形が「関数を実行する」という正しい呼び出し方

console.log("=== 関数実行おわり ===");

/*
【動作シミュレーション表】

| 呼び出し方法     | 戻り値   | 出力例                          |
|------------------|---------|----------------------------------|
| hyperDrive()     | 7777    | hyperDrive の戻り値 → 7777       |
| hyperDrive(123)  | 7777    | hyperDrive の戻り値 → 7777       |
| hyperDrive(999)  | 7777    | hyperDrive の戻り値 → 7777       |

【ポイント】
- アロー関数はシンプルに書ける関数の形
- return した時点で関数は終了し、その値が外に渡る
- 引数を渡しても今回の関数は使わないので、何を渡しても同じ結果になる
- resultValue は「数値」なので () を付けて呼び出すことはできない
  → resultValue(); はエラーになる
*/

/*
【「呼び出す」と「参照する」の違い整理表】

| 用語        | 意味                                               | 例                          | 結果                |
|-------------|----------------------------------------------------|-----------------------------|---------------------|
| 呼び出す    | 関数名の後ろに () を付けて、関数の処理を実行する    | hyperDrive()                 | 関数の戻り値(7777)  |
| 参照する    | 変数や定数に入っている値をそのまま使う（実行しない）| resultValue                  | 数値 7777           |
| 間違いやすい| resultValue() のように () を付けると、変数が関数でない限りエラーになる | resultValue()                | エラー              |

【補足】
- 関数は「呼び出す」対象
- 数値や文字列などの値は「参照する」対象
- 今回の resultValue は「数値」なので、呼び出しはできず、参照だけできる

【関数を実行すること と 戻り値を呼び出すことの違い】

- 「関数を実行する」とは、関数名の後ろに () を付けて、関数内の処理を動かすことです。
  例）hyperDrive() は関数を呼び出して処理が実行され、戻り値 7777 が返されます。

- 一方、「戻り値を呼び出す」というのは間違った表現で、
  戻り値は関数の実行結果であり、もし戻り値が関数でなければ
  () を付けて呼び出すことはできません。

- 今回の例では、resultValue に入っているのは「数値 7777」なので、
  resultValue(); と書くと「数値を関数として実行しようとする」ことになりエラーになります。

まとめると、
- 関数は () を付けて「呼び出す」ことができる
- 関数の戻り値（数値など）は「参照」するだけで、() は付けられない

この違いを理解すると、関数と変数の使い方が明確になります。
*/






// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
//==============================
// 🎯 戻り値の練習（引数の計算結果を返す）
// Q. 引数 "inputValue" を受け取り、
// その値に 1.5 を掛けた結果を返す関数 "calculateBoost" を作成してください。

//==============================
// ⚡ アロー関数 calculateBoost を作成する
//==============================
// 「アロー関数」とは、短く書ける関数の書き方です。
// この関数は受け取った数値（inputValue）に1.5倍の倍率をかけて返します。

const calculateBoost = (inputValue) => {
  // (1) inputValue：関数に渡される数値
  // ここでは「元の値」を想定しています。

  return inputValue * 1.5;
  // (2) 入力された値に1.5をかけて、その結果を返す（return）。
  // return は関数の結果を呼び出し元に渡す役割を持ちます。
};

//==============================
// 📣 関数を呼び出して結果をコンソールに表示する
//==============================

console.log(
  "計算結果: calculateBoost(50) の戻り値は → " + calculateBoost(50)
);
// (3) calculateBoostに50を渡して呼び出す。
// (4) 関数の中で 50 × 1.5 の計算を行い、75を返す。
// (5) その結果をコンソールに表示する。






// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// <!--1:34:00～-->


// 🎲 抽選処理の基本（引数と乱数 Math.random）
// Q. 引数 "entryCode" を受け取り、
// 実行時にその値をそのまま戻す関数 "winChance" を作成しなさい。
// ただし成功率は30%とし、
// 外れた場合は 0 を返すように実装してください。
// ヒント：
// * if文を使って条件分岐します
// * Math.random() を用いて確率判定を行います


//==============================
// 🎯 アロー関数 winChance を定義する
//==============================
// 「winChance（当選チャンス）」という関数を作成。
// この関数は、抽選番号（entryCode）を引数として受け取り、
// 30%の確率でその番号を返し、70%の確率で0を返す関数です。

const winChance = (entryCode) => {
  // (1) entryCode：抽選で使用する番号（例：100など）

  if (Math.random() <= 0.3) {
    // (2) Math.random()は0以上1未満のランダムな数を返す。
    // 0.3以下であれば「当選」としてentryCodeをそのまま返す。

    return entryCode;
  } else {
    // (3) それ以外（70%の確率）は外れとし、0を返す。

    return 0;
  }
};

//==============================
// 📢 関数を使って抽選結果を表示する
//==============================

console.log("抽選結果：番号200をエントリー → 戻り値は " + winChance(200));
// (4-1) winChance関数を200という番号で実行。
// (4-2) 30%の確率で200が返り、70%の確率で0が返る。
// (4-3) 結果はconsole.logで表示される。







// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// <!--1::00～-->


///戻り値その４(戻り値と関数 returnとundefind)
///undefindがあらわる理由
///※※※関数の処理にreturn戻り値がないと、呼び出し元に値が入らない。
function hello3() {
  //関数hello3
  console.log("hello3はこんにちはがでますか？"); // ← ※※関数の処理内容にreturn戻り値がない。ただ処理内容"hello3はこんにちはが～"が出力されるだけ。
}
let result3 = hello3(); // ← 変数result3。上記の関数hello3に戻り値がない。関数hello3の値は入らない。
console.log(result3); // ← 呼び出し元。値が入らないので、これは undefined と出る。
console.log("↑関数hello3。関数の処理にreturn戻り値がない場合はundefindが表示される");

///returnであらわる理由
///※※※関数にreturn戻り値があると、呼び出し元に値が入る。
function hello4() {
  //関数hello4
  return "returnを使うとhello4はこんにちはがでます！"; // ← ※※下記の呼び出し元用に、関数の処理内容にreturn戻り値がある。
}
let result4 = hello4(); // ← 変数result4。これに上記のreturnで返された関数hello4の値が入る
console.log(result4); // ← 呼び出し元。これは "returnを使うとhello" が表示されます。
console.log("↑関数hello4。関数の処理にreturn戻り値がある場合は値が出力される。");




