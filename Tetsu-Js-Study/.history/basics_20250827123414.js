// ① basics.js
// 👉 JavaScriptの基本文法や構文をまとめるファイル

// 含める機能：

// 変数（let, const）

// データ型（文字列、数値、真偽値など）

// 論理演算子（&&, ||, !）

// 条件式

// if文

// デバッグ（console.log など）






//constで変数の宣言、変数への値の代入
const foo = 18000 + 10000; //const変数fooに値5+1を代入する。
console.log("constで変数fooを定義して呼び出す→" + foo); //変数fooを出力する。コンソールで28000が表示される。

//letで変数の宣言、変数への値の代入
//※※letは再代入可能な変数。安全性のため基本的にconstを使う
let hoge = 1; //letで代入: 変数hogeに値1を代入する。
hoge = "22222"; //※※letなしで再代入: 変数hogeに値22を再代入する。
console.log("letで変数hoge=1を宣言。その後に変数hogeに22222を再代入して呼び出す→" + hoge); //hogeに値が再代入され"22222"が出力される。

//変数result 計算結果は3
const result = 1 + 2;
console.log("constで定義した上記の変数result = 1+2 を呼び出す→" + result);

//""で囲うと文字列stringとして認識
console.log("Hello" + "World");
console.log("1" + "1"); //11になる

//値をわざと空にする時にするときにnullを使う
let errorMessage = null;
console.log("上記でletで変数errorMessageにnullという値を入れている→" + errorMessage);




//値を設定していないときはundefindが出力される
let errorMessage2;
console.log("ここは上記で値を設定していないのでundefindが出る→" + errorMessage2);






// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// ::00〜



//データ型
console.log(typeof "ラスカル"); //""で囲って文字列string
console.log(typeof 10);
console.log(typeof true); //boolean論理値
console.log(typeof "null"); //""で囲って文字列string






// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// 1:15:00〜
// ===================================
// 🖥 ログイン状態チェックプログラム（false 判定）
// ===================================

// ✅ 用語の説明
// ・true  → 「はい / OK / 条件に当てはまる」
// ・false → 「いいえ / NG / 条件に当てはまらない」
// ・if(条件式) { ... } → 「もし 条件 が true なら { } の中を実行する」
// ・=== → 「左と右がまったく同じか」を調べる（厳密な等価演算子）

// --------------------------------------------------
// 💡 初期状態（変数の確認）
// --------------------------------------------------
console.log("=== 💡 初期状態を確認します ===");

// ユーザーがログインしているかどうかを表す変数
let isLoggedIn = false; // 今回は false に設定
console.log(`🔹 変数 isLoggedIn = ${isLoggedIn} （今回の値は false）`);


// --------------------------------------------------
// 📦 判定スタート！
// --------------------------------------------------
console.log("=== 📦 ログイン状態をチェックします ===");

// if(条件式) { ... } は「もし条件がOKなら…する」
if (isLoggedIn === false) { // isLoggedIn が false のとき実行
  console.log("🚪 ログインしてください");
  console.log(`← 変数 isLoggedIn の値が ${isLoggedIn} （今回の値は false）なので、この if 文が実行されました。`);
}


// --------------------------------------------------
// 📝 補足
// --------------------------------------------------
// ・if (isLoggedIn === false) は「もし isLoggedIn が false なら…」という意味
// ・=== は省略できる場合もある
//   例）if (isLoggedIn === true) → if (isLoggedIn)
//       if (isLoggedIn === false) → if (!isLoggedIn)
//
// ✅ !（NOT演算子）について
// 「!」は「反対・逆」を意味します。
// 例）!true  → false
//     !false → true
// つまり if (!isLoggedIn) は
// 「もしログインしていないなら…」という意味になります。




// ===================================
// 🖥 ログイン状態チェックプログラム（true 判定）
// ===================================

// --------------------------------------------------
// 💡 初期設定
// --------------------------------------------------
console.log("=== 💡 初期状態を確認します ===");
console.log("↓↓ 今回は最初に変数 isUserLoggedIn の値を true で設定しておきます。");

// 変数 isUserLoggedIn にログイン状態を代入する
let isUserLoggedIn = true; 
// true = ログイン済み、false = 未ログイン
console.log(`🔹 変数 isUserLoggedIn = ${isUserLoggedIn} （今回の値は true）`);


// --------------------------------------------------
// 📦 判定スタート！
// --------------------------------------------------
// if(条件式) { ... } は「もし条件がOKなら…する」
// !（びっくりマーク）は「反対」にするスイッチ
// つまり !isUserLoggedIn は「isUserLoggedIn が false の場合と同じ意味」
if (!isUserLoggedIn) { 
  // !がついているので isUserLoggedIn が false のとき実行
  console.log("🚪 ログインできていません ❌");
  console.log(`← 今回の isUserLoggedIn = ${isUserLoggedIn} （今回の値は true）なので、この if 文は実行されません。`);

} else { 
  // それ以外（true）のとき実行
  console.log("✅ ログイン済みです！ようこそ 🎉");
  console.log(`← 今回の isUserLoggedIn = ${isUserLoggedIn} （今回の値は true）なので else 文が実行されました。`);
  console.log(`if 条件式 "!isUserLoggedIn" → 実際の評価結果は false （今回の isUserLoggedIn が true だから）なので、else に入りました。`);
}


// --------------------------------------------------
// 📝 動作シミュレーション表
// --------------------------------------------------
//
// | isUserLoggedIn の値 | !isUserLoggedIn（条件式の評価結果） | 実行されるブロック | コンソール表示                        |
// |---------------------|-------------------------------------|--------------------|---------------------------------------|
// | true                | false                              | else               | ✅ ログイン済みです！ようこそ 🎉      |
// | false               | true                               | if                 | 🚪 ログインできていません ❌          |


// --------------------------------------------------
// 【ポイントまとめ】
// --------------------------------------------------
// ・true は「はい / OK」、false は「いいえ / NG」
// ・!true → false、!false → true
// ・if は「もし〜なら」、else は「それ以外なら」
// ・!（NOT演算子）は条件を「反対」にひっくり返す






//  ===================================
//    🖥 論理演算子（&& と ||）の図解例
//  ===================================

// ⚠ 論理演算子は「true（OK）」を基準に考えます。
//    false = ダメ ❌
//    true  = OK ✅

// 【イメージ図】
// &&（どっちもOK＝true？）
// true && true  → ✅ OK！
// true && false → ❌ ダメ
// false && true → ❌ ダメ
// false && false → ❌ ダメ
//
// ||（どっちかOK＝true？）
// true || true  → ✅ OK！
// true || false → ✅ OK！
// false || true → ✅ OK！
// false || false → ❌ ダメ
//
// !（逆さまにする）
// !true  → false
// !false → true


// --------------------------------------------------
// ---------- &&（どっちもOK＝true？）の例 ----------
// --------------------------------------------------
let hasTicket = true;   // 🎫 チケットを持っている？ → 今回の値は true
let isAdult = false;    // 👶 子どもかな？ → 今回の値は false

console.log(
  `🎯 初めの設定 → hasTicket = ${hasTicket}（今回の値は true）, isAdult = ${isAdult}（今回の値は false）`
);

// 「チケットも持っていて、なおかつ大人なら入れる」
if (hasTicket && isAdult) {
  console.log("🎫 チケットもあって大人だから入れるよ！ ✅");
  console.log(" ← 両方 ok = true のときだけ、このメッセージが出ます。");
} else {
  console.log("🚪 チケットがないか、子どもだから入れない… ❌");
  console.log(
    ` ← 今回は hasTicket = ${hasTicket}（true）, isAdult = ${isAdult}（false）なので、結果は false。else が実行されました。`
  );
}


// --------------------------------------------------
// ---------- ||（どっちかOK＝true？）の例 ----------
// --------------------------------------------------
let ateMeal = false;   // 🍚 ごはんを食べた？ → 今回の値は false
let ateSnack = true;   // 🍪 お菓子を食べた？ → 今回の値は true

console.log(
  `🎯 初めの設定 → ateMeal = ${ateMeal}（今回の値は false）, ateSnack = ${ateSnack}（今回の値は true）`
);

// 「ごはんかお菓子、どっちかでも食べたらお腹OK」
if (ateMeal || ateSnack) {
  console.log("🍽 ごはんかお菓子を食べたからお腹は大丈夫！ 😋 ✅");
  console.log(
    ` ← 今回は ateMeal = ${ateMeal}（false）, ateSnack = ${ateSnack}（true）なので、結果は true。if が実行されました。`
  );
} else {
  console.log("🍴 何も食べてないからお腹すいた… 🥺 ❌");
  console.log(" ← 両方 false のとき、このメッセージになります。");
}


// --------------------------------------------------
// 【動作まとめ表】
// --------------------------------------------------

// (1) &&（どっちもOK＝true？）
// | hasTicket | isAdult | 結果  | 出るメッセージ |
// |-----------|---------|-------|----------------|
// | ✅        | ✅      | ✅    | if の中        |
// | ✅        | ❌      | ❌    | else の中      |
// | ❌        | ✅      | ❌    | else の中      |
// | ❌        | ❌      | ❌    | else の中      |

// (2) ||（どっちかOK＝true？）
// | ateMeal | ateSnack | 結果  | 出るメッセージ |
// |---------|----------|-------|----------------|
// | ✅      | ✅       | ✅    | if の中        |
// | ✅      | ❌       | ✅    | if の中        |
// | ❌      | ✅       | ✅    | if の中        |
// | ❌      | ❌       | ❌    | else の中      |

// --------------------------------------------------
// 【まとめ】
// --------------------------------------------------
// ・論理演算子は true（OK）を基準に考えます。
// ・&& → 両方とも ok = true なら ✅
// ・|| → どちらか1つでも ok = true なら ✅
// ・! → 逆さまにする（✅ ⇄ ❌）








// ===================================
// 🖥 ユーザーの役目チェックプログラム
//    （if / else if / else の流れ）
// ===================================

// ✅ ここで使う「===」の意味
// 「===」は「同じかどうか？」をチェックする記号です。
// たとえば userRole === "member" は
// 「userRole の中身が 'member' と同じ？」と聞いています。
// 同じなら true（はい！）、ちがえば false（いいえ！）になります。

// 🔍 「===」と「==」のちがい
// ・=== → きびしいチェック（数字か文字かも確認する）
// ・==  → ゆるいチェック（数字と文字のちがいを気にしない）
//
// 例：
//   1 === "1" → false（数字と文字はちがうものだから ❌）
//   1 == "1"  → true （数字と文字のちがいを無視するから ✅）
//
// プログラムでは「===（きびしいほう）」を使うのが安心です！

// ユーザーの役目を表す定数
// "member" = 社員, "admin" = 管理者, "owner" = 社長
const userRole = "member"; 
// ↑ 今回は "member"（社員）として実行します

// --------------------------------------------------
// if, else if, else の流れ図
// --------------------------------------------------
// 1️⃣ if(条件) → まず最初にここをチェック
//     ✅ もし当てはまったら、その中の処理を実行して終了
// 2️⃣ else if(条件) → if が ❌ だったら次にここをチェック
//     ✅ ここで当てはまれば、その中の処理を実行して終了
// 3️⃣ else → どれも当てはまらなかったときの保険
//     ✅ 必ず実行される（最後の切り札）
// --------------------------------------------------

console.log("=== 条件分岐スタート ===");

if (userRole === "member") { 
  console.log("👷 社員：アクセスできません ❌");
  console.log(
    ` ← userRole = ${userRole}（今回の値は "member"）なので、この if が true となり実行されました。`
  );

} else if (userRole === "admin") { 
  console.log("🛠 管理者：10分だけアクセス可能 ⏳");
  console.log(
    ` ← userRole = ${userRole}（今回の値は "member"）なので、この else if は実行されません。`
  );

} else { 
  console.log("👑 社長またはその他：自由にアクセス可能 🎉");
  console.log(
    ` ← userRole = ${userRole}（今回の値は "member"）なので、ここは実行されません。`
  );
}

console.log("=== 条件分岐おわり ===");


// ===================================
// 【動作シミュレーション表】
// ===================================
//
// | userRole の値 | 流れ                                         | 実行される場所 | 出力内容                              |
// |---------------|---------------------------------------------|----------------|---------------------------------------|
// | "member"      | if が true → そこで終了                     | if             | 👷 社員：アクセスできません ❌         |
// | "admin"       | if が false → else if が true → そこで終了   | else if        | 🛠 管理者：10分だけアクセス可能 ⏳     |
// | "owner"       | if false → else if false → else 実行         | else           | 👑 社長またはその他：自由にアクセス可能 🎉 |
// | "guest" など  | if false → else if false → else 実行         | else           | 👑 社長またはその他：自由にアクセス可能 🎉 |
//
// ===================================
// 【ポイント】
// ===================================
// ・if → 最初にチェックする条件
// ・else if → if がダメだったときに次に試す条件
// ・else → どれもダメだったら実行する最後の保険
// ・一度当てはまったら下の条件はもう見ない（スキップ！）







// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// 1:17:00〜

// ===================================
// 🖥 発送判定プログラム
//    （if 文で条件チェック ＆ 変数の値を変える例）
// ===================================

// ✅ まずは使う言葉の説明
// ・true（ほんとう） → 条件に当てはまるときの状態
// ・false（うそ）   → 条件に当てはまらないときの状態
// ・if(条件) { }    → 「もし 条件 が true なら { } の中を実行する」
// ・>=              → 「以上」（左が右と同じか、それより大きいなら true）

// --------------------------------------------------
// 変数と定数のちがい
// --------------------------------------------------
// ・let で作る「変数」 → あとから中身を変えられる（再代入できる）
// ・const で作る「定数」 → 中身を変えられない（固定のまま）
// --------------------------------------------------


// --------------------------------------------------
// 💡 初期状態を表示（まず確認）
// --------------------------------------------------
console.log("=== 💡 初期状態を確認します ===");

// 発送するかどうかを表す変数
let isShipping = false; 
console.log("🔹 isShipping = false （発送しない状態）");

// お財布のお金を表す定数
const myMoney = 1000; 
console.log("🔹 myMoney = 1000 円");


// --------------------------------------------------
// 📦 判定スタート！
// --------------------------------------------------
console.log("=== 📦 発送判定プログラムのスタート ===");
console.log("続きです 👉 お金が 500円以上あるかどうかをチェックします。");

// 条件：お金が500円以上あるか？
if (myMoney >= 500) {
  isShipping = true; // false → true に変更
  console.log("💰 判定結果 → 500円以上あるので発送することにしました！ 🚚✨ （false から true に書き換えた）");
} else {
  console.log("💸 判定結果 → お金が足りないので今回は発送できません… 🙅‍♂️");
}



// ===================================
// 【動作シミュレーション表】
// ===================================
//
// | myMoney の値 | 判定 (myMoney >= 500) | isShipping の最終値 |
// |--------------|-----------------------|---------------------|
// | 1000         | true （500以上）      | true  （発送する）  |
// | 500          | true （500ちょうど）  | true  （発送する）  |
// | 499          | false（500未満）      | false （発送しない）|
//
// ===================================
// 【ポイントまとめ】
// ===================================
// ・let で作った変数はあとから変えられる
// ・const で作った定数は変えられない
// ・if(条件) { … } は「もし 条件 が true なら 中の処理を実行する」
// ・>= は「以上」（同じでもOK、それ以上でもOK）










// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// <!--1:29:00～-->
// =======================================
// 🖥 グローバル変数とローカル変数の例
//    （関数内外で変数の有効範囲を確認）
// =======================================

// ✅ 用語の説明
// ・グローバル変数 → プログラム全体で使える変数（どこからでもアクセス可能）
// ・ローカル変数   → 関数の中だけで使える変数（関数外からは見えない）
// ・関数（function） → やりたいことをまとめたレシピのようなもの
// ・スコープ（scope） → 変数が「有効な範囲」のこと

// --------------------------------------------------
// 💡 初期状態（グローバル変数の確認）
// --------------------------------------------------
console.log("=== 💡 初期状態を確認します ===");

// 🌏 グローバル変数を定義（プログラム全体で使える）
let globalNumber = 1;
console.log(`🔹 グローバル変数 globalNumber = ${globalNumber} （今回の値は 1）を設定しました。（プログラム全体で使えます）`);


// --------------------------------------------------
// 🏠 関数 showNumber を作る（ローカル変数の確認）
// --------------------------------------------------
// 関数の中は「ローカルスコープ」と呼ばれ、関数の外とは別世界です
console.log(" ↓↓↓ ローカル変数の世界へ ↓↓↓");

function showNumber() {
    // 🏠 ローカル変数を定義（関数内でだけ使える）
    const localNumber = 2;

    console.log(`🏠 【関数内】ローカル変数 localNumber = ${localNumber} （今回の値は 2）`);
    console.log("⚠️ function showNumber は『定義しただけ』の状態です。"
        + " ローカル変数 localNumber = 2 （今回の値は 2）は、関数 showNumber を『呼び出したとき』にだけ表示されます！");
}


// --------------------------------------------------
// 👇 関数を呼び出して実行
// --------------------------------------------------
console.log("=== 📦 関数 showNumber を呼び出して実行します ===");
showNumber();


// --------------------------------------------------
// 🌏 関数の外でグローバル変数を表示
// --------------------------------------------------
console.log("=== 🌏 関数の外（グローバルスコープ）での表示 ===");
console.log(`🌏 グローバル変数 globalNumber = ${globalNumber} （今回の値は 1）`);

console.log("🏠 関数内のローカル変数 localNumber は外からは見えません（使えません）");


// ===================================
// 【ポイントまとめ】
// ===================================
// 1. グローバル変数はプログラム全体で使える
// 2. ローカル変数は関数内だけで使える（関数外からは見えない）
// 3. 同じ名前の変数をグローバルとローカルで使っても、それぞれ独立している
// 4. 関数は作っただけでは動かない。呼び出して初めて処理が実行される







