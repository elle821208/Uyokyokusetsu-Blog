// ② functions.js
// 👉 関数まわりを集中管理

// 含める機能：

// 関数

// 引数

// 戻り値

// アロー関数

// コールバック関数




// =======================================
// JavaScriptの基本：関数（function）の使い方
// =======================================

// 1. 通常の関数の定義と引数
function introduce(name, job) {
    console.log("私は " + name + " です。");
    console.log(job + " です。");
}

// 関数の呼び出し（値を引数として渡す）
introduce("哲也", "プログラマー");

// 👉 補足説明
console.log("👉 上記で関数名 introduce (第一引数, 第二引数) を実行");
console.log("   - 一つ目の引数 '哲也' が name に渡る（第一引数）");
console.log("   - 二つ目の引数 'プログラマー' が job に渡る（第二引数）");
console.log("👉 関数は呼び出さないと処理は実行されない。上記関数名 introduce で実行したので、処理が実行された");


// 2. 関数式（無名関数）の定義
const introduce2 = function (name, job) {
    console.log("私は " + name + " です。");
    console.log(job + " です。");
};

// 関数式の呼び出し
introduce2("tetsuya", "コーダー");

// 👉 補足説明
console.log("👉 上記で関数名 introduce2 (第一引数, 第二引数) を実行");
console.log("   - 一つ目の引数 'tetsuya' が name に渡る（第一引数）");
console.log("   - 二つ目の引数 'コーダー' が job に渡る（第二引数）");
console.log("👉 関数は呼び出さないと処理は実行されない。上記関数名 introduce2 で実行したので、処理が実行された");


// =======================================
// 3. 関数と関数式の違い・メリット・デメリット（まとめ）
// =======================================
/*
【関数（function宣言）の特徴】
✅ 名前をつけて定義できる → コードが読みやすい
✅ 巻き上げ（ホイスティング）されるので、定義より前でも呼び出せる
❌ 変数に代入できないので柔軟性は低め

【関数式（無名関数）の特徴】
✅ 関数を変数に代入できる → 他の関数に渡したりできる
✅ 必要なタイミングで作れるので柔軟性が高い
❌ 巻き上げされないので、定義より前に呼び出すとエラーになる

【まとめ】
👉 基本的な処理は function で定義することが多い
👉 関数を値として扱いたいときや一時的に使うときは 関数式 を使う
*/







// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// 1:19:00〜
//関数function<!--1:19:00～-->

// 現在の時刻が20時より大きい（21時〜23時）なら背景を黒にする
if (new Date().getHours() > 20) {
    document.body.style.backgroundColor = "#000";
}

// ↓上記のif文を関数化する
function changeDarkMode() {
    // 上記のif文と同じ内容
    if (new Date().getHours() > 20) {
        document.body.style.backgroundColor = "#000";
    }
}

// 関数を呼び出す
changeDarkMode();















// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq

//コールバック関数<!--1:26:20～-->
console.log(" ↓↓↓ コールバック関数 a=メイン関数、b=コールバック引数、c=コールバック関数");

// a = メイン関数
// b = コールバック引数（関数を受け取る）
function a(b) {
  console.log("Hi,Cat!"); // メインの処理
  b(); // b() = c() を実行（コールバック関数の呼び出し）
}

// c = コールバック関数（あとから実行される関数）
function c() {
  console.log("Hi,Bat!"); // 追加の処理
}

// 呼び出し：メイン関数 a に コールバック関数 c を渡す
a(c);





// ▼ 実行の流れまとめ図（c の例）▼
// (1) ユーザーが a(c) を実行（c は追加関数）
//           ↓
// (2) 関数 a がスタート（b = c）← a はメイン関数、b は引数名
//           ↓
// (3) "Hi,Cat!" を表示（メイン処理）
//           ↓
// (4) b() を実行（＝ c() を実行）→ コールバック処理
//           ↓
// (5) 関数 c がスタート（追加処理）
//           ↓
// (6) "Hi,Bat!" を表示（追加あいさつ）
//           ↓
//       完了！















//アロー関数※戻り値はなし
//右辺の関数を"function()"から"()=>"に置き換えてコードをシンプルにする。
const introduce3 = (name, job) => {
  //(2)関数式introduce3(引数)。呼び出し元の引数の値が入る。
  console.log(`私は${name}です。`); //(3)コンソール出力。関数の実行内容。引数の値を入れて出力される。
  console.log(`${job}です。`); //同上
};

//(1)呼び出し元。(4)関数式introduce3を呼び出す。
introduce3("aya", "アドバイザー");
//私はayaです。
//アドバイザーです。

//qittaより
//戻り値その１（呼び出し元で受け取る処理結果）
//関数(アロー関数と関数式)
const area = (height, width) => {
  //(2)アロー関数式area（引数）。呼び出し元の引数の値が代入される。
  return height * width; //(3)関数areaの実行内容=戻り値return。値は60。（12×5の計算結果）
};

console.log("ここのconsoleが呼び出し元。右の関数area(12,5)を上記の関数area(height, width)とreturn height * widthで計算させてreturnでここに戻す" + area(12, 5)); //(1)呼び出し元。引数12,5を設定しておく。
//(4)呼び出し元で関数areaをコンソール出力する際に戻り値returnの値60が代入される。
//60

//関数を別の定数に代入して出力
const result2 = area(120,50); //上記の関数areaの(height, width)で計算させて、定数result2に代入される。
console.log("ここのconsoleがresult2の呼び出し元。関数area(120,50)の値を上記の関数area(height, width)とreturn height * widthで計算させてreturnでresult2がここに戻る" + result2); //定数result２を出力する。関数areaの引数、戻り値
//6000

    //戻り値その２（サムライエンジニアより）

    function hello(name) {
    //(2)関数hello。引数(name)に呼び出し元の値'サムライエンジニア太郎'が代入される。

    return "こんにちは、" + name + "さん"; //(3)関数の実行内容=戻り値。引数の値を代入して計算する。
    }

    console.log("ここのconsoleがhelloの呼び出し元。上記helloののnameに値が渡ってreturnでhelloがここに戻ってくる" + hello("サムライエンジニア太郎")); //(1)呼び出し元。引数の値に'サムライエンジニア太郎'を設定しておく。
    //④呼び出す際に、戻り値が代入され出力される。
    // 'こんにちは、' + 'サムライエンジニア太郎' + 'さん'
    //がコンソール出力される。








// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
//戻り値その１<!--1:31:00～-->


// ===================================
// 🚀 戻り値チェックプログラム（アロー関数の動きがわかる版）
// ===================================

//Q.実行したら戻り値7777を返す関数"hyperDrive"を作成しなさい。

// --------------------------------------------------
// アロー関数 hyperDrive を定義
// --------------------------------------------------
// アロー関数とは、function を使わずに短く書ける関数の形
// () の中に引数、{} の中に実行する処理を書く
// 今回は、実行すると数値 7777 を返すだけのシンプルな関数
console.log("↓↓↓ === アロー関数 hyperDrive を定義する。実行すると常に戻り値 7777 を返す。 ===");
const hyperDrive = () => {
  return 7777; 
  // return は「この値を関数の外に渡す」命令
  // この場合、関数を呼び出すと必ず 7777 が戻る
};


console.log("↓↓↓ === 関数実行スタート ===");

// --------------------------------------------------
// ↓↓↓ アロー関数 hyperDrive を呼び出し、その戻り値を定数 resultValue に代入する
// --------------------------------------------------
console.log("↓↓↓ const resultValue = hyperDrive(); "
    + "で 定数 resultValue を定義して、関数 hyperDrive を実行する。"
    + "関数名 hyperDrive の後ろに () をつけると、"
    + "関数 hyperDrive が実行され、戻り値 7777 が resultValue に入る。");

const resultValue = hyperDrive(); 
// 関数名 hyperDrive の後ろに () をつけると、関数 hyperDrive が実行され、戻り値 7777 が resultValue に入る
// ここで resultValue に入っているのは関数ではなく「数値 7777」
// そのため resultValue は「参照」しかできず、関数のように呼び出すことはできない
// もし resultValue(); とすると「数値を関数として呼び出そうとした」ことになりエラーになる
// 関数として呼び出せるのは hyperDrive() のように、関数そのものに () をつけた場合だけ
// 定数 resultValue の中に格納された アロー関数 hyperDrive の戻り値 7777 を表示する

console.log(`${resultValue} ← この$波括弧resultValue は、
    定数 resultValue を参照（変数に入っている値をそのまま使う）し、
    定数 resultValue に格納されたアロー関数 hyperDrive の戻り値 7777 を表示している。`);


// --------------------------------------------------
// 関数名そのものを直接呼び出す例
// --------------------------------------------------
console.log(`${hyperDrive()} ← 波括弧 hyperDrive() で 
アロー関数 hyperDrive を直接呼び出した。`);

// ここでは hyperDrive() を直接実行しているため、処理が走り、7777 が返る
// この形が「関数を実行する」という正しい呼び出し方

// resultValue2
const resultValue2 = 8888;
console.log(`${resultValue2} ← 波括弧 resultValue2 で 
    定数 resultValue2 を参照（変数に入っている値をそのまま使う）し、
    その値 8888 を表示している。`);


console.log("=== 関数実行おわり ===");

/*
【動作シミュレーション表】

| 呼び出し方法     | 戻り値   | 出力例                          |
|------------------|---------|----------------------------------|
| hyperDrive()     | 7777    | hyperDrive の戻り値 → 7777       |
| hyperDrive(123)  | 7777    | hyperDrive の戻り値 → 7777       |
| hyperDrive(999)  | 7777    | hyperDrive の戻り値 → 7777       |

【ポイント】
- アロー関数はシンプルに書ける関数の形
- return した時点で関数は終了し、その値が外に渡る
- 引数を渡しても今回の関数は使わないので、何を渡しても同じ結果になる
- resultValue は「数値」なので () を付けて呼び出すことはできない
  → resultValue(); はエラーになる
*/

/*
【「呼び出す」と「参照する」の違い整理表】

| 用語        | 意味                                               | 例            | 結果         |
|-------------|----------------------------------------------------|---------------|--------------|
| 呼び出す    | 関数名の後ろに () を付けて、関数の処理を実行する    | hyperDrive()  | 7777         |
| 参照する    | 変数や定数に入っている値を () を付けずに使う        | resultValue   | 数値 7777    |
| 誤用例      | 戻り値（数値など）に () を付けて呼び出そうとする    | resultValue() | エラー       |

【補足】
- 関数は () を付けて「呼び出す」対象
- 数値や文字列などの戻り値は「参照」対象
- 戻り値が関数でない場合、() を付けるとエラーになる

【関数の実行 と 戻り値の扱い】
- 「関数を実行する」= 関数名 + () で関数内の処理を動かす（例：hyperDrive() → 7777）
- 戻り値は「関数の実行結果」であり、関数でなければ呼び出せない
- resultValue には数値 7777 が入っているので、() を付けて呼び出すことはできない
*/







// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
//==============================
// 🎯 戻り値の練習（引数の計算結果を返す）
//戻り値その１<!--1:32:15～-->
// Q. 引数 "inputValue" を受け取り、
// その値に 1.5 を掛けた結果を返す関数 "calculateBoost" を作成してください。

// ===================================
// ⚡ 倍率計算プログラム（アロー関数の練習版）
// ===================================

// Q. 受け取った数値を 1.5 倍して返すアロー関数 "calculateBoost" を作成しなさい。

// --------------------------------------------------
// アロー関数 calculateBoost を定義
// --------------------------------------------------
// アロー関数とは、function を書かずに短くシンプルに関数を定義できる書き方
// () の中に「引数（受け取る値）」を指定し、{} の中に「実行する処理」を書く
// 今回は、引数 inputValue を受け取り、それに 1.5 を掛け算して返す
console.log("↓↓↓ === アロー関数 calculateBoost を定義する。実行すると渡した数値の 1.5 倍を返す。 ===");

const calculateBoost = (inputValue) => {
  // inputValue：関数に渡される数値
  // 例） calculateBoost(50) とすると、inputValue には 50 が入る

  return inputValue * 1.5;
  // return は「関数の外に値を渡す」ための命令
  // ここでは「渡された値 × 1.5」を返している
  // 例） 50 を渡した場合、 50 × 1.5 = 75 が返る
};


// --------------------------------------------------
// 関数を呼び出して結果をコンソールに表示する
// --------------------------------------------------
console.log("↓↓↓ === 関数 calculateBoost を呼び出して、結果を確認する ===");

console.log(
  "計算結果: calculateBoost(50) の戻り値は → " + calculateBoost(50)
);
// 関数 calculateBoost を呼び出すときは、関数名の後ろに () を付ける
// () の中に「引数」を渡すと、その値が関数内で使われる
// 例） calculateBoost(50) → inputValue = 50
// 関数内で 50 × 1.5 の計算が行われ、結果 75 が return される
// その結果を文字列と結合してコンソールに表示している


// --------------------------------------------------
// 【動作シミュレーション表】
// --------------------------------------------------
/*
| 呼び出し方法              | inputValue | 計算内容      | 戻り値 | 出力例                                   |
|---------------------------|------------|---------------|--------|------------------------------------------|
| calculateBoost(50)        | 50         | 50 × 1.5      | 75     | 計算結果: calculateBoost(50) の戻り値は → 75 |
| calculateBoost(100)       | 100        | 100 × 1.5     | 150    | 計算結果: calculateBoost(100) の戻り値は → 150 |
| calculateBoost(0)         | 0          | 0 × 1.5       | 0      | 計算結果: calculateBoost(0) の戻り値は → 0   |

【ポイント】
- アロー関数は function より短く書ける関数の形
- 引数を () の中に書き、その値を使って処理できる
- return で返された値が「関数の戻り値」として外に渡る
- 呼び出すときは関数名 + () を使い、戻り値を参照できる
*/







// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// <!--1:34:00～-->

// ===================================
// 🎲 抽選処理プログラム（引数と乱数の練習版）
// ===================================

// Q. 引数 "entryCode" を受け取り、成功率30%でその番号を返す関数 "winChance" を作成しなさい。
// 　→ 当選した場合：そのまま entryCode を戻す
// 　→ 外れた場合：0 を戻す
// --------------------------------------------------
// ヒント
// * if文を使って条件分岐する
// * Math.random() を用いて確率を判定する
//   Math.random() は 0 以上 1 未満のランダムな数を返す


// --------------------------------------------------
// 🎯 アロー関数 winChance を定義する
// --------------------------------------------------
// winChance（当選チャンス）という名前の関数を作成
// 引数 entryCode に抽選番号（例：200など）を渡す
// Math.random() を使って 30% の確率で「当選」判定を行う
// 当たったら entryCode を返し、外れたら 0 を返す
console.log("↓↓↓ === アロー関数 winChance を定義する。30% の確率で番号を返し、70% の確率で 0 を返す。 ===");

const winChance = (entryCode) => {
  // entryCode：抽選で使用する番号（例：200）
  // この値は「当選したときに返す番号」として利用される

  if (Math.random() <= 0.3) {
    // Math.random() は 0以上1未満のランダムな数を返す
    // 例）0.12, 0.58, 0.99 などがランダムに出てくる
    // もしその数値が 0.3 以下なら「当選」と判定する（確率30%）
    return entryCode; 
    // 当選した場合、渡された entryCode（例：200）をそのまま返す
  } else {
    // 0.3 より大きい数値が出た場合（確率70%）
    // この場合は「外れ」として 0 を返す
    return 0;
  }
};


// --------------------------------------------------
// 📢 関数を実行して抽選結果を表示する
// --------------------------------------------------
console.log("↓↓↓ === 関数 winChance を呼び出し、抽選結果を確認する ===");

console.log("抽選結果：番号200をエントリー → 戻り値は " + winChance(200));
// winChance(200) を呼び出す
// (1) entryCode に 200 が渡される
// (2) Math.random() の結果によって当選/外れが決まる
// 　　- 30% の確率 → 戻り値は 200
// 　　- 70% の確率 → 戻り値は 0
// (3) その戻り値を console.log で表示する


// --------------------------------------------------
// 【動作シミュレーション表】
// --------------------------------------------------
/*
| Math.random() の値 | 判定   | 戻り値 | 出力例                                |
|--------------------|--------|--------|---------------------------------------|
| 0.12               | 当選   | 200    | 抽選結果：番号200をエントリー → 戻り値は 200 |
| 0.58               | 外れ   | 0      | 抽選結果：番号200をエントリー → 戻り値は 0   |
| 0.99               | 外れ   | 0      | 抽選結果：番号200をエントリー → 戻り値は 0   |

【ポイント】
- Math.random() <= 0.3 なら「当選」
- それ以外は「外れ」
- 引数 entryCode を渡すと「当選した場合はその番号が戻り値になる」
- 外れた場合は常に 0 が戻り値になる
*/






// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// <!--1::00～-->


// ===================================
// 📚 戻り値と return / undefined の関係
// ===================================
// Q. 関数の処理に return がある場合と無い場合で、
// 呼び出し元に何が返るのかを確認するプログラム


// --------------------------------------------------
// 戻り値その４ (return が無い場合 → undefined が返る)
// --------------------------------------------------
// ※※※ 関数の処理に return が無いと、呼び出し元には何も返らない。
// そのため、結果は自動的に undefined になる。
console.log("↓↓↓ === 関数 hello3 を定義する。return が無いため、呼び出し元には undefined が返る。 ===");

function hello3() {
  // 関数 hello3 の処理内容
  console.log("hello3はこんにちはがでますか？");
  // ↑ これは関数内でコンソールに文字を表示しているだけ
  // return が無いので、呼び出し元に渡す値は存在しない
}

let result3 = hello3(); 
// 関数 hello3 を呼び出し、結果を変数 result3 に代入する
// ただし hello3 には return が無いため、結果は undefined になる

console.log(result3); 
// result3 を参照して表示 → 中身は undefined
console.log("↑関数 hello3：関数に return が無い場合、呼び出し元は undefined になる");


// --------------------------------------------------
// return がある場合（呼び出し元に値が返る）
// --------------------------------------------------
// ※※※ 関数に return があると、呼び出し元にその値が返る。
console.log("↓↓↓ === 関数 hello4 を定義する。return があるため、呼び出し元に文字列が返る。 ===");

function hello4() {
  // 関数 hello4 の処理内容
  return "returnを使うとhello4はこんにちはがでます！"; 
  // return によって文字列を呼び出し元に返している
}

let result4 = hello4(); 
// 関数 hello4 を呼び出すと、return の結果（文字列）が返され、
// その値が result4 に代入される

console.log(result4); 
// result4 を参照して表示 → "returnを使うとhello4はこんにちはがでます！"
console.log("↑関数 hello4：関数に return がある場合、呼び出し元に値が返り、表示できる");


// --------------------------------------------------
// 【動作シミュレーション表】
// --------------------------------------------------
/*
| 関数名   | return の有無 | 戻り値       | 呼び出し元での結果          |
|----------|---------------|--------------|-----------------------------|
| hello3() | なし          | undefined    | result3 = undefined         |
| hello4() | あり          | 文字列       | result4 = "returnを使うと…" |

【ポイント】
- 関数の処理に return が無いと、自動的に undefined が返る
- return がある場合、その値が呼び出し元に返り、変数に代入して使える
- console.log() 内で return の結果を参照すると、返された値がそのまま表示される
*/


