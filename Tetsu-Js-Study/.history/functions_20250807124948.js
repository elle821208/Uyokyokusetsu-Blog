// ② functions.js
// 👉 関数まわりを集中管理

// 含める機能：

// 関数

// 引数

// 戻り値

// アロー関数

// コールバック関数


//qittaより
//functionで関数を定義し、（）で引数を設定する。
function introduce(name, job) {
  //functionで関数introduceを定義し、 引数(関数に与える情報)name、job
    console.log(`ここが呼び出し元。
        上記の関数functon introduceに、
        ここと下記の引数の値が入り、
        ここで呼び出される。→ 私は${name}です。`); //コンソール出力。関数introduceの実行内容。
  console.log(`${job}です。`); //同上
}

introduce("哲也。※引数1で上記のnameにわたる", "プログラマー。※ここは引数2で上記のjobに渡る"); //上記で設定した関数introduceを実行、今回はコンソール出力する。あらかじめ引数の値も設定しておく。
//関数introduceを実行すると設定した引数の値('ta1fukumoto', 'エンジニア')が関数introduceのname、jobに値が渡される。
//下記が表示される。
//私はta1fukumotoです。
//エンジニアです。




// ==========================
// ▼ 関数式（無名関数）の例
// ==========================

// 🔸「関数式（かんすうしき）」とは：
//   → 関数（＝ある処理をまとめたもの）を、定数に代入する書き方です。
//   → 「無名関数（むめいかんすう）」とは、名前のない関数という意味です。

// introduce2 という定数に、関数を代入しています。
// ここでの function(name, job) が「無名関数」です。
const introduce2 = function (name, job) {
  // 🔹この関数の中では、「name」と「job」が受け取った値（引数）を使って処理します。

  // 下のように書くことで、文字の中に変数（${name}や${job}）を入れることができます。
  // 「`（バッククォート）」を使うと、変数を埋め込んだ文字列が作れます（これをテンプレート文字列といいます）。

  // 関数が呼び出されると、下の2行が実行されます。
  console.log(`ここが呼び出し元。下記のintroduce2("tetsuya", "コーダー")で関数式を呼び出し、()内の引数の値が上記のfunction(name,job)に入る。 → 私は${name}です。`);
  console.log(`${job}です。`);
};

// ==========================
// ▼ 関数式の呼び出し方
// ==========================

// 🔸introduce2("tetsuya", "コーダー") のように、定数名introduce2に対して()をつけて実行します。
// 🔸()の中に値を入れることで、「引数（ひきすう）」として関数にデータを渡します。
//    → この例では name = "tetsuya", job = "コーダー" が渡されます。

introduce2("tetsuya", "コーダー");

// 出力結果：
// 私はtetsuyaです。
// コーダーです。






//アロー関数※戻り値はなし
//右辺の関数を"function()"から"()=>"に置き換えてコードをシンプルにする。
const introduce3 = (name, job) => {
  //(2)関数式introduce3(引数)。呼び出し元の引数の値が入る。
  console.log(`私は${name}です。`); //(3)コンソール出力。関数の実行内容。引数の値を入れて出力される。
  console.log(`${job}です。`); //同上
};

//(1)呼び出し元。(4)関数式introduce3を呼び出す。
introduce3("aya", "アドバイザー");
//私はayaです。
//アドバイザーです。

//qittaより
//戻り値その１（呼び出し元で受け取る処理結果）
//関数(アロー関数と関数式)
const area = (height, width) => {
  //(2)アロー関数式area（引数）。呼び出し元の引数の値が代入される。
  return height * width; //(3)関数areaの実行内容=戻り値return。値は60。（12×5の計算結果）
};

console.log("ここのconsoleが呼び出し元。右の関数area(12,5)を上記の関数area(height, width)とreturn height * widthで計算させてreturnでここに戻す" + area(12, 5)); //(1)呼び出し元。引数12,5を設定しておく。
//(4)呼び出し元で関数areaをコンソール出力する際に戻り値returnの値60が代入される。
//60

//関数を別の定数に代入して出力
const result2 = area(120,50); //上記の関数areaの(height, width)で計算させて、定数result2に代入される。
console.log("ここのconsoleがresult2の呼び出し元。関数area(120,50)の値を上記の関数area(height, width)とreturn height * widthで計算させてreturnでresult2がここに戻る" + result2); //定数result２を出力する。関数areaの引数、戻り値
//6000

    //戻り値その２（サムライエンジニアより）

    function hello(name) {
    //(2)関数hello。引数(name)に呼び出し元の値'サムライエンジニア太郎'が代入される。

    return "こんにちは、" + name + "さん"; //(3)関数の実行内容=戻り値。引数の値を代入して計算する。
    }

    console.log("ここのconsoleがhelloの呼び出し元。上記helloののnameに値が渡ってreturnでhelloがここに戻ってくる" + hello("サムライエンジニア太郎")); //(1)呼び出し元。引数の値に'サムライエンジニア太郎'を設定しておく。
    //④呼び出す際に、戻り値が代入され出力される。
    // 'こんにちは、' + 'サムライエンジニア太郎' + 'さん'
    //がコンソール出力される。





// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// 1:19:00〜
//関数function<!--1:19:00～-->

// 現在の時刻が20時より大きい（21時〜23時）なら背景を黒にする
if (new Date().getHours() > 20) {
    document.body.style.backgroundColor = "#000";
}

// ↓上記のif文を関数化する
function changeDarkMode() {
    // 上記のif文と同じ内容
    if (new Date().getHours() > 20) {
        document.body.style.backgroundColor = "#000";
    }
}

// 関数を呼び出す
changeDarkMode();






// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq

//コールバック関数<!--1:26:20～-->
console.log(" ↓↓↓ コールバック関数 a=メイン関数、b=コールバック引数、c=コールバック関数");

// a = メイン関数
// b = コールバック引数（関数を受け取る）
function a(b) {
  console.log("Hi,Cat!"); // メインの処理
  b(); // b() = c() を実行（コールバック関数の呼び出し）
}

// c = コールバック関数（あとから実行される関数）
function c() {
  console.log("Hi,Bat!"); // 追加の処理
}

// 呼び出し：メイン関数 a に コールバック関数 c を渡す
a(c);





// ▼ 実行の流れまとめ図（c の例）▼
// (1) ユーザーが a(c) を実行（c は追加関数）
//           ↓
// (2) 関数 a がスタート（b = c）← a はメイン関数、b は引数名
//           ↓
// (3) "Hi,Cat!" を表示（メイン処理）
//           ↓
// (4) b() を実行（＝ c() を実行）→ コールバック処理
//           ↓
// (5) 関数 c がスタート（追加処理）
//           ↓
// (6) "Hi,Bat!" を表示（追加あいさつ）
//           ↓
//       完了！








// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// 戻り値<!--1:27:00～-->



// ==========================
// ① 季節を調べるための関数を作る
// ==========================
// 関数（function）とは…
//   料理のレシピのようなもの。
//   名前をつけておくと、あとで「レシピを実行（呼び出し）」するだけで、
//   決まった手順をまとめて実行できる。

function getSeason() {
    // --------------------------
    // ② 今の月（1月～12月）を調べる
    // --------------------------
    // new Date() は、現在の「日付と時間」の情報をコンピュータから取り出す命令。
    // getMonth() は「今の月」を数字で返す（0～11で返る。0=1月、11=12月）。
    // なので、+1 して 1～12 の数字に変える。
    const month = new Date().getMonth() + 1; // constで変数monthを定義。中身は上記の通り。

    // 【処理の流れ】このあと if文を使って、month の値がどの季節に当てはまるかを調べる。

    // --------------------------
    // ③ 季節を決めるための条件分け（if文）
    // --------------------------
    // if文とは「もし○○なら～する」という条件の分かれ道。
    // ここでは「month（今の月）が3～5なら春」といったルールを書く。
    // そして、ルールに当てはまると return で結果を返す。

    // ＝＝「&&」について＝＝
    // 「&&」は「そして」という意味の記号（論理演算子）。
    // 例えば「3以上 && 5以下」は、
    // 「3以上 そして 5以下」の両方が正しいときだけ true（正しい）になる。
    // イメージ： 「リンゴが好き && バナナが好き」なら「両方好き」なときだけOK。

    // 【処理順序】
    //   1) まず 3月～5月の範囲かどうかをチェック
    //   2) ダメなら 6～8月かどうかをチェック
    //   3) さらにダメなら 9～11月かどうかをチェック
    //   4) どれにも当てはまらなければ 12,1,2月（冬）と判定する

    if (month >= 3 && month <= 5) {
        // 3月（3）から5月（5）までなら「spring（春）」を返す
        return "spring";   // ★ここで関数終了（return）
    } else if (month >= 6 && month <= 8) {
        // 6月～8月なら「summer（夏）」を返す
        return "summer";    // ★ここで関数終了（return）
    } else if (month >= 9 && month <= 11) {
        // 9月～11月なら「autumn（秋）」を返す
        return "autumn";   // ★ここで関数終了（return）
    } else {
        // それ以外（12月, 1月, 2月）は「winter（冬）」を返す
        return "winter";   // ★ここで関数終了（return）
    }

    // ★returnしたらこの関数の処理はここで終わる。
}

// ==========================
// ④ 変数seasonで関数getSeason()を実際に使う
// ==========================
// 関数getSeason() を呼び出すと、
//   上で作った「getSeasonのレシピ」が実行され、
//   その結果（spring, summer, autumn, winter のどれか）が戻ってくる。
// その結果を const season という変数に入れる。
const season = getSeason(); // constで変数seasonを定義。中身は関数getSeasonの結果（春夏秋冬の文字）。

// ==========================
// ⑤ 結果を画面に出す
// ==========================
// console.log(season);
//   → 変数 season の中身を画面（コンソール）に表示する。
console.log("上記で定義した関数getSeason(月日のデータとif文で季節を分ける)を変数seasonで使う→" + season);




// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
//戻り値その１<!--1:31:00～-->
//Q.実行したら戻り値2000を返す関数"sonicBoom"を作成しなさい。

// =======================================
// 🔊 アロー関数 sonicBoom を定義する
// =======================================
// 「アロー関数式」とは、関数をより簡潔に書ける記法です。
// () 内に引数、{} 内に処理内容を設定します。
// この関数では、数値 2000 を返すだけのシンプルな処理を行っています。

const sonicBoom = () => {
  return 2000; // (1-1) 関数 sonicBoom の「実行結果（戻り値）」として 2000 を返す。
  // 「return」とは、関数の外に値を返す命令です。
  // ここで return された値は、関数の呼び出し元（関数の外）に渡されます。
};

// =======================================
// 🔁 関数を実行して、その戻り値を表示する
// =======================================
// (2-1) 関数 sonicBoom を実行するには、関数名の後ろに () をつけます。
// ここでは console.log() の中で sonicBoom() を呼び出しているため、
// 関数が実行され、その戻り値（＝2000）が表示されます。

console.log("上記の関数soniBoomの中にある戻り値 2000 → " + sonicBoom(2000));
// (2-2) 結果：「戻り値 sonicBoom の値 2000 → 2000」と表示される。
// 関数の呼び出しに引数 2000 を渡しているように見えるが、
// 実際には関数 sonicBoom は引数を使っておらず、常に 2000 を返す。
// そのため、何を渡しても出力は 2000 になります。

// 💡 補足：このように「関数の戻り値」は、関数の中で return を使うことで
// 関数の外に値を渡し、必要なときに使うことができます。




// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// 戻り値その２（戻り値と引数）
// Q.引数"lastDamage"を持ち
// 実行したら"lastDamage"に1.5をかけた値を
// 戻り値として返す関数"metalBurst"を作成しなさい。

// =======================================
// 🛡️ アロー関数 metalBurst を定義する
// =======================================
// 「アロー関数式」とは、関数をより簡単に書ける方法です。
// ここでは、受け取ったダメージ（lastDamage）を 1.5 倍にして返す関数を作っています。

const metalBurst = (lastDamage) => {
  // (1-1) アロー関数 metalBurst を定義。
  // (1-2) 引数 lastDamage には、関数を呼び出すときに渡された値が入る。
  // これは「最後に受けたダメージの量」を想定しています。

  return lastDamage * 1.5;
  // (1-3) 関数の中で、引数 lastDamage を 1.5 倍して返す。
  // 「return」とは、関数の実行結果（戻り値）を関数の外へ渡す命令。
  // この戻り値が、関数を呼び出した場所で使えるようになります。
};

// =======================================
// 📢 関数を呼び出して戻り値を表示する
// =======================================

console.log(
  "ここが console の呼び出し元です。右記でmetalBurst(50) の引数を 50 に設定すると、関数の中の戻り値 lastDamage * 1.5 = 75 を返します。→ " + metalBurst(50)
);
// (2-1) 関数 metalBurst を「50」という引数を渡して実行。
// (2-2) 実行すると、関数の中で 50 * 1.5 の計算が行われ、戻り値は 75 になる。
// (2-3) その結果を console.log で表示している。
// ➜ 結果：75 が出力される。





// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// <!--1:34:00～-->


// 🎲 抽選処理の基本（引数と乱数 Math.random）
// Q. 引数 "entryCode" を受け取り、
// 実行時にその値をそのまま戻す関数 "winChance" を作成しなさい。
// ただし成功率は30%とし、
// 外れた場合は 0 を返すように実装してください。
// ヒント：
// * if文を使って条件分岐します
// * Math.random() を用いて確率判定を行います


//==============================
// 🎯 アロー関数 winChance を定義する
//==============================
// 「winChance（当選チャンス）」という関数を作成。
// この関数は、抽選番号（entryCode）を引数として受け取り、
// 30%の確率でその番号を返し、70%の確率で0を返す関数です。

const winChance = (entryCode) => {
  // (1) entryCode：抽選で使用する番号（例：100など）

  if (Math.random() <= 0.3) {
    // (2) Math.random()は0以上1未満のランダムな数を返す。
    // 0.3以下であれば「当選」としてentryCodeをそのまま返す。

    return entryCode;
  } else {
    // (3) それ以外（70%の確率）は外れとし、0を返す。

    return 0;
  }
};

//==============================
// 📢 関数を使って抽選結果を表示する
//==============================

console.log("抽選結果：番号200をエントリー → 戻り値は " + winChance(200));
// (4-1) winChance関数を200という番号で実行。
// (4-2) 30%の確率で200が返り、70%の確率で0が返る。
// (4-3) 結果はconsole.logで表示される。







// 宇宙一わかりやすいJS
// https://youtu.be/ZE484EEuQ8k?si=qE-_dh3BZNDctbmq
// <!--1::00～-->


///戻り値その４(戻り値と関数 returnとundefind)
///undefindがあらわる理由
///※※※関数の処理にreturn戻り値がないと、呼び出し元に値が入らない。
function hello3() {
  //関数hello3
  console.log("hello3はこんにちはがでますか？"); // ← ※※関数の処理内容にreturn戻り値がない。ただ処理内容"hello3はこんにちはが～"が出力されるだけ。
}
let result3 = hello3(); // ← 変数result3。上記の関数hello3に戻り値がない。関数hello3の値は入らない。
console.log(result3); // ← 呼び出し元。値が入らないので、これは undefined と出る。
console.log("↑関数hello3。関数の処理にreturn戻り値がない場合はundefindが表示される");

///returnであらわる理由
///※※※関数にreturn戻り値があると、呼び出し元に値が入る。
function hello4() {
  //関数hello4
  return "returnを使うとhello4はこんにちはがでます！"; // ← ※※下記の呼び出し元用に、関数の処理内容にreturn戻り値がある。
}
let result4 = hello4(); // ← 変数result4。これに上記のreturnで返された関数hello4の値が入る
console.log(result4); // ← 呼び出し元。これは "returnを使うとhello" が表示されます。
console.log("↑関数hello4。関数の処理にreturn戻り値がある場合は値が出力される。");




